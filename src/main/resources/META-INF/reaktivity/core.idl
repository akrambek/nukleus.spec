/*
 * Copyright 2016-2017 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope core
{
    scope control
    {
        enum Role
        {
            INPUT,
            OUTPUT
        }

        enum State
        {
            NONE,
            NEW,
            ESTABLISHED
        }

        struct Frame
        {
            int64 correlationId;
        }

        struct Error extends core::control::Frame [0x40000000]
        {
        }

        struct Route extends core::control::Frame [0x00000001]
        {
            core::control::Role role;
            core::control::State state;
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Routed extends core::control::Frame [0x40000001]
        {
            int64 sourceRef;
        }

        struct Unroute extends core::control::Frame [0x00000002]
        {
            core::control::Role role;
            core::control::State state;
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Unrouted extends core::control::Frame [0x40000002]
        {
        }

        struct Authenticate extends core::control::Frame [0x00000003]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string secureName;
            int64 secureRef;
            octets extension;
        }

        struct Authenticated extends core::control::Frame [0x40000003]
        {
        }

        struct Unauthenticate extends core::control::Frame [0x00000004]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string secureName;
            int64 secureRef;
            octets extension;
        }

        struct Unauthenticated extends core::control::Frame [0x40000004]
        {
        }

        struct Authorize extends core::control::Frame [0x00000005]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string secureName;
            octets extension;
        }

        struct Authorized extends core::control::Frame [0x40000005]
        {
        }

        struct Unauthorize extends core::control::Frame [0x00000006]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string secureName;
            octets extension;
        }

        struct Unauthorized extends core::control::Frame [0x40000006]
        {
        }
        
    }

    scope stream
    {
        struct Frame
        {
            int64 streamId;
        }

        struct Begin extends core::stream::Frame [0x00000001]
        {
            int64 referenceId;
            int64 correlationId;
            octets extension;
        }

        struct Data extends core::stream::Frame [0x00000002]
        {
            uint16 length;
            octets[length] payload;
            octets extension;
        }

        struct End extends core::stream::Frame [0x00000003]
        {
            octets extension;
        }

        struct Reset extends core::stream::Frame [0x40000001]
        {
        }

        struct Window extends core::stream::Frame [0x40000002]
        {
            int32 update;
        }
    }

    scope security
    {
        struct Frame
        {
            int64 correlationId;
        }

        struct Promote extends core::security::Frame [0x00000001]
        {
            int64 securityRef;
            int64 priorSubjectId;
            octets extension;
        }

        struct Promoted extends core::security::Frame [0x40000001]
        {
            int64 subjectId;
        }

        struct Authorize extends core::security::Frame [0x00000002]
        {
            int64 subjectId;
            list<string> roles;
        }

        struct Authorized extends core::security::Frame [0x40000002]
        {
        }
        
        struct Demote extends core::security::Frame [0x00000003]
        {
            int64 subjectId;
        }
        
        struct Demoted extends core::security::Frame [0x40000003]
        {
        }
        
        struct Challenged extends core::security::Frame [0x40000004]
        {
            octets extension;
        }
        
        struct Denied extends core::security::Frame [0x40000005]
        {
        }
    }
        
}
